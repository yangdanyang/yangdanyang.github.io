---
layout:     post
title:      "设计模式学习总结之代理模式"
subtitle:   " \"Proxy Pattern\""
date:       2017-06-06 
author:     "Yang"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - Design Pattern
---

> “on road”
## 代理模式
### 概述:
     在软件开发中，也有一种设计模式可以提供与代购网站类似的功能。由于某些原因，客户端
     不想或不能直接访问一个对象，此时可以通过一个称之为"代理"的第三者来实现间接访问，
     该方案对应的设计模式被称为代理模式。

### 定义:
    给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。

### 角色:
     1)Subject(抽象主题角色):它声明了真实主题和代理主题的共同接口，这样一来在任何使
     用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。
     2)Proxy(代理主题角色):它包含了对真实主题的引用，从而可以在任何时候操作真实主题
     对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代
     真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实
     主题对象，并对真实主题的使用加以约束。通常，在代理主题角色中，客户端在调用所引用
     的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操
     作。
     3)RealSubject(真实主题角色):它定义了代理角色所代表的真实对象，在真实主题角色中
     实现了真实的业务操作，在客户端可以通过代理主题角色间接调用真实主题角色中定义的操
     作。

### 实现:
    抽象主题类声明了真实主题类和代理类的公共方法，它可以是接口，抽象类或具体类，客户端
    针对抽象主题类编程，一致性的对待真实主题和代理主题，典型的抽象主题类代码如下:
    abstract class Subject{
     public abstract void Request();
    }

    真实主题类继承了抽象主题类，提供了业务方法的具体实现，其典型代码如下:
    class RealSubject extends Subject{
     public override void Request(){
       //业务方法具体实现代码
     }
    }
    代理类也是抽象主题类的子类，它维持了一个队真实主题对象的引用，调用在真实主题中实现
    的业务方法，在调用时可以在原有业务方法的基础上附加一些新的方法来对功能进行扩充或约
    束，最简单的代理类实现代码如下:
    class Proxy extends Subject{
	    //维持一个对真实主题对象的引用
	     private RealSubject realSubject = new RealSubject();
	     public void PreRequest(){
	       ......
	     }
	
	     public override void Request(){
	       PreRequest();
	       realSubject.Request();//调用真实主题对象的方法
	       PostRequest();
	     }
	
	     public void PostRequest(){
	       ....
	     }
    }

### 优点:
    1)能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。
    2)客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原
    则，系统具有较好的灵活性和可扩展性。

### 缺点:
    1)由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。
    2)实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。

