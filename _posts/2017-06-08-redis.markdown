---
layout:     post
title:      "redis 学习总结"
subtitle:   " \"redis\""
date:       2017-06-08 
author:     "Yang"
header-img: "img/post-bg-alitrip.jpg"
catalog: true
tags:
    - Data base
---

> “on road”

## redis
#### Redis数据结构: 
	String—字符串（key-value 类型） 
	Hash—字典(hashmap) redis的哈希结构可以使你像在数据库中更新一个属性一样只修改某一项
	属性值 
	List—列表 实现消息队列 
	Set—集合 利用唯一性 
	Sorted Set—有序集合 可以进行排序 
	可以实现数据持久化
	
### 使用redis有哪些好处？　

　　(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)

　　(2) 支持丰富数据类型，支持string，list，set，sorted set，hash

　　(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行

　　(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除

### Memcache与Redis的区别都有哪些？

　　(1)、存储方式

　　　　Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。

　　　　Redis有部份存在硬盘上，这样能保证数据的持久性。

　　(2)、数据支持类型

　　　　Memcache对数据类型支持相对简单。

　　　　Redis有复杂的数据类型。

　　(3)、使用底层模型不同

　　　　它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。

　　　　Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。

### redis常见性能问题和解决方案？

　　(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件

　　(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次

　　(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内

　　(4) 尽量避免在压力很大的主库上增加从库

　　(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...

　　这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。

### redis的并发竞争问题如何解决?

　　Redis为单进程单线程模式，采用队列模式将并发访问变为串行访问。Redis本身没有锁的概念，Redis对于多个客户端连接并不存在竞争，但是在Jedis客户端对Redis进行并发访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题均是由于客户端连接混乱造成。对此有2种解决方法：

	1.客户端角度，为保证每个客户端间正常有序与Redis进行通信，对连接进行池化，同时对客户
	端读写Redis操作采用内部锁synchronized。
	
	2.服务器角度，利用setnx实现锁。
	对于第一种，需要应用程序自己处理资源的同步，可以使用的方法比较通俗，可以使用
	synchronized也可以使用lock；第二种需要用到Redis的setnx命令，但是需要注意一些问
	题。

### redis持久化的几种方式

　　1、快照（snapshots）

　　　　缺省情况情况下，Redis把数据快照存放在磁盘上的二进制文件中，文件名为dump.rdb。你可以配置Redis的持久化策略，例如数据集中每N秒钟有超过M次更新，就将数据写入磁盘；或者你可以手工调用命令SAVE或BGSAVE。

工作原理

Redis forks.
子进程开始将数据写到临时RDB文件中。
当子进程完成写RDB文件，用新文件替换老文件。
这种方式可以使Redis使用copy-on-write技术。
　　2、AOF

　　快照模式并不十分健壮，当系统停止，或者无意中Redis被kill掉，最后写入Redis的数据就会丢失。这对某些应用也许不是大问题，但对于要求高可靠性的应用来说，

　　Redis就不是一个合适的选择。
　　Append-only文件模式是另一种选择。
　　你可以在配置文件中打开AOF模式

　　3、虚拟内存方式

　　4、diskstore方式

### redis事物的了解CAS(check-and-set 操作实现乐观锁)?

  和众多其它数据库一样，Redis作为NoSQL数据库也同样提供了事务机制。在Redis中，MULTI/EXEC/DISCARD/WATCH这四个命令是我们实现事务的基石。相信对有关系型数据库开发经验的开发者而言这一概念并不陌生，即便如此，我们还是会简要的列出Redis中事务的实现特征：
  
      1). 在事务中的所有命令都将会被串行化的顺序执行，事务执行期间，Redis不会再为其它客
      户端的请求提供任何服务，从而保证了事物中的所有命令被原子的执行。
      
      2). 和关系型数据库中的事务相比，在Redis事务中如果有某一条命令执行失败，其后的命令
      仍然会被继续执行。
      
      3). 我们可以通过MULTI命令开启一个事务，有关系型数据库开发经验的人可以将其理解
      为"BEGIN TRANSACTION"语句。在该语句之后执行的命令都将被视为事务之内的操作，最后
      我们可以通过执行EXEC/DISCARD命令来提交/回滚该事务内的所有操作。这两个Redis命令
      可被视为等同于关系型数据库中的COMMIT/ROLLBACK语句。
      
      4). 在事务开启之前，如果客户端与服务器之间出现通讯故障并导致网络断开，其后所有待执
      行的语句都将不会被服务器执行。然而如果网络中断事件是发生在客户端执行EXEC命令之后，
      那么该事务中的所有命令都会被服务器执行。
      
      5). 当使用Append-Only模式时，Redis会通过调用系统函数write将该事务内的所有写操
      作在本次调用中全部写入磁盘。然而如果在写入的过程中出现系统崩溃，如电源故障导致的宕
      机，那么此时也许只有部分数据被写入到磁盘，而另外一部分数据却已经丢失。Redis服务器
      会在重新启动时执行一系列必要的一致性检测，一旦发现类似问题，就会立即退出并给出相应
      的错误提示。此时，我们就要充分利用Redis工具包中提供的redis-check-aof工具，该工
      具可以帮助我们定位到数据不一致的错误，并将已经写入的部分数据进行回滚。修复之后我们
      就可以再次重新启动Redis服务器了。
      
      
### mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据

	相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略： 
	volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 
	volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰 
	volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰 
	allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰 
	allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 
	no-enviction（驱逐）：禁止驱逐数据
	
	

#### 设计存储海量数据的存储系统：

设计一个叫“中间层”的一个逻辑层，在这个层，将数据库的海量数据抓出来，做成缓存，运行在服务器的内存中，同理，当有新的数据到来，也先做成缓存，再想办法，持久化到数据库中，这是一个简单的思路。主要的步骤是负载均衡，将不同用户的请求分发到不同的处理节点上，然后先存入缓存，定时向主数据库更新数据。读写的过程采用类似乐观锁的机制，可以一直读（在写数据的时候也可以），但是每次读的时候会有个版本的标记，如果本次读的版本低于缓存的版本，会重新读数据，这样的情况并不多，可以忍受。

### redis 应用场景
	
	1、显示最新的项目列表
	2、删除与过滤
	3、排行榜相关
	4、按照用户投票和时间排序
	5、处理过期项目
	6、计数
	7、特定时间内的特定项目
	8、实时分析正在发生的情况，用于数据统计与防止垃圾邮件等
	9、Pub/Sub
	10、队列
	11、缓存

1.  MySql+Memcached架构的问题　　

    实际MySQL是适合进行海量数据存储的，通过Memcached将热点数据加载到cache，加速访问，很多公司都曾经使用过这样的架构，但随着业务数据量的不断增加，和访问量的持续增长，我们遇到了很多问题：
    
	    1.MySQL需要不断进行拆库拆表，Memcached也需不断跟着扩容，扩容和维护工作占据大量
	    开发时间。　　
	    2.Memcached与MySQL数据库数据一致性问题。　　
	    3.Memcached数据命中率低或down机，大量访问直接穿透到DB，MySQL无法支撑。　　
	    4.跨机房cache同步问题。　　
    
    众多NoSQL百花齐放，如何选择　　
    
    最近几年，业界不断涌现出很多各种各样的NoSQL产品，那么如何才能正确地使用好这些产品，最大化地发挥其长处，是我们需要深入研究和思考的问题，实际归根结底最重要的是了解这些产品的定位，并且了解到每款产品的tradeoffs，在实际应用中做到扬长避短，总体上这些NoSQL主要用于解决以下几种问题　　
    
	    1.少量数据存储，高速读写访问。此类产品通过数据全部in-momery 的方式来保证高速访
	    问，同时提供数据落地的功能，实际这正是Redis最主要的适用场景。　　
	    
	    2.海量数据存储，分布式系统支持，数据一致性保证，方便的集群节点添加/删除。
	    　　
	    3.这方面最具代表性的是dynamo和bigtable 2篇论文所阐述的思路。前者是一个完全无
	    中心的设计，节点之间通过gossip方式传递集群信息，数据保证最终一致性，后者是一个中
	    心化的方案设计，通过类似一个分布式锁服务来保证强一致性,数据写入先写内存和redo 
	    log，然后定期compat归并到磁盘上，将随机写优化为顺序写，提高写入性能。
	    　　
	    4.Schema free，auto-sharding等。比如目前常见的一些文档数据库都是支持
	    schema-free的，直接存储json格式数据，并且支持auto-sharding等功能，比如
	    mongodb。　
    
   面对这些不同类型的NoSQL产品,我们需要根据我们的业务场景选择最合适的产品。
    　  
   Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?      
   
    如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：
        
     1 、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结
     构的存储。     
     2 、Redis支持数据的备份，即master-slave模式的数据备份。     
     3 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载
     进行使用。
     
 Redis常用数据类型,Redis最为常用的数据类型主要有以下：

	String
	Hash
	List
	Set
	Sorted set
	pub/sub
	Transactions
	
在具体描述这几种数据类型之前，我们先通过一张图了解下Redis内部内存管理中是如何描述这些不同数据类型的：

![](file:////Users/yang/Desktop/1.png) 

首先Redis内部使用一个redisObject对象来表示所有的key和value,redisObject最主要的信息如上图所示：         

	type代表一个value对象具体是何种数据类型，         
	encoding是不同数据类型在redis内部的存储方式，         

比如：type=string代表value存储的是一个普通字符串，那么对应的encoding可以是raw或者是int,如果是int则代表实际redis内部是按数值型类存储和表示这个字符串的，当然前提是这个字符串本身可以用数值表示，比如:"123" "456"这样的字符串。      

 这里需要特殊说明一下vm字段，只有打开了Redis的虚拟内存功能，此字段才会真正的分配内存，该功能默认是关闭状态的，该功能会在后面具体描述。通过上图我们可以发现Redis使用redisObject来表示所有的key/value数据是比较浪费内存的，当然这些内存管理成本的付出主要也是为了给Redis不同数据类型提供一个统一的管理接口，实际作者也提供了多种方法帮助我们尽量节省内存使用，我们随后会具体讨论。

### 各种数据类型应用和实现方式

### String:

Strings 数据结构是简单的key-value类型，value其实不仅是String，也可以是数字.
常用命令:  set,get,decr,incr,mget 等。

#### 应用场景：
   String是最常用的一种数据类型，普通的key/ value 存储都可以归为此类.即可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受Redis的定时持久化，操作日志及 Replication等功能。除了提供与 Memcached 一样的get、set、incr、decr 等操作外，Redis还提供了下面一些操作：
    
    获取字符串长度
    往字符串append内容
    设置和获取字符串的某一段内容
    设置及获取字符串的某一位（bit）
    批量设置一系列字符串的内容
    
#### 实现方式：
   String在redis内部存储默认就是一个字符串，被redisObject所引用，当遇到incr,decr等操作时会转成数值型进行计算，此时redisObject的encoding字段为int。
   
### Hash:

常用命令：hget,hset,hgetall 等

#### 应用场景：
   在Memcached中，我们经常将一些结构化的信息打包成HashMap，在客户端序列化后存储为一个字符串的值，比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合（比如两个并发的操作都需要修改积分）。而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值。        我们简单举个实例来描述下Hash的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储，主要有以下2种存储方式：

![](file:////Users/yang/Desktop/2.png)

第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，这种方式的缺点是，增加了序列化/反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。

![](file:////Users/yang/Desktop/3.png)

第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。那么Redis提供的Hash很好的解决了这个问题，Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口，如下图：

![](file:////Users/yang/Desktop/4.png)

也就是说，Key仍然是用户ID, value是一个Map，这个Map的key是成员的属性名，value是属性值，这样对数据的修改和存取都可以直接通过其内部Map的Key(Redis里称内部Map的key为field), 也就是通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题。很好的解决了问题。

这里同时需要注意，Redis提供了接口(hgetall)可以直接取到全部的属性数据,但是如果内部Map的成员很多，那么涉及到遍历整个内部Map的操作，由于Redis单线程模型的缘故，这个遍历操作可能会比较耗时，而另其它客户端的请求完全不响应，这点需要格外注意。

#### 实现方式：

   上面已经说到Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。

### List
   常用命令：lpush,rpush,lpop,rpop,lrange等。
   
#### 应用场景：
Redis list的应用场景非常多，也是Redis最重要的数据结构之一，比如twitter的关注列表，粉丝列表等都可以用Redis的list结构来实现。

Lists 就是链表，相信略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作Lists中某一段的api，你可以直接查询，删除Lists中某一段的元素。

#### 实现方式：
Redis list的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销，Redis内部的很多实现，包括发送缓冲队列等也都是用的这个数据结构。

### Set
常用命令：sadd,spop,smembers,sunion 等。

#### 应用场景：
Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。

Sets 集合的概念就是一堆不重复值的组合。利用Redis提供的Sets数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。

#### 实现方式：
set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。


### Sorted Set
常用命令：zadd,zrange,zrem,zcard等

#### 使用场景：
Redis sorted set的使用场景与set类似，区别是set不是自动有序的，而sorted set可以通过用户额外提供一个优先级(score)的参数来为成员排序，并且是插入有序的，即自动排序。当你需要一个有序的并且不重复的集合列表，那么可以选择sorted set数据结构，比如twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。

另外还可以用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。

#### 实现方式：
Redis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。

#### Pub/Sub

Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。

#### Transactions

谁说NoSQL都不支持事务，虽然Redis的Transactions提供的并不是严格的ACID的事务（比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行），但是这个Transactions还是提供了基本的命令打包执行的功能（在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行）。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。

### Redis实际应用场景        

Redis在很多方面与其他数据库解决方案不同：它使用内存提供主存储支持，而仅使用硬盘做持久性的存储；它的数据模型非常独特，用的是单线程。另一个大区别在于，你可以在开发环境中使用Redis的功能，但却不需要转到Redis。

转向Redis当然也是可取的，许多开发者从一开始就把Redis作为首选数据库；但设想如果你的开发环境已经搭建好，应用已经在上面运行了，那么更换数据库框架显然不那么容易。另外在一些需要大容量数据集的应用，Redis也并不适合，因为它的数据集不会超过系统可用的内存。所以如果你有大数据应用，而且主要是读取访问模式，那么Redis并不是正确的选择。        

然而我喜欢Redis的一点就是你可以把它融入到你的系统中来，这就能够解决很多问题，比如那些你现有的数据库处理起来感到缓慢的任务。这些你就可以通过Redis来进行优化，或者为应用创建些新的功能。在本文中，我就想探讨一些怎样将Redis加入到现有的环境中，并利用它的原语命令等功能来解决 传统环境中碰到的一些常见问题。在这些例子中，Redis都不是作为首选数据库。

1、显示最新的项目列表下面这个语句常用来显示最新项目，随着数据多了，查询毫无疑问会越来越慢。 

    SELECT * FROM foo WHERE ... ORDER BY time DESC LIMIT 10          
    
  在Web应用中，“列出最新的回复”之类的查询非常普遍，这通常会带来可扩展性问题。这令人沮丧，因为项目本来就是按这个顺序被创建的，但要输出这个顺序却不得不进行排序操作。        
  
  类似的问题就可以用Redis来解决。比如说，我们的一个Web应用想要列出用户贴出的最新20条评论。在最新的评论边上我们有一个“显示全部”的链接，点击后就可以获得更多的评论。      
  
  我们假设数据库中的每条评论都有一个唯一的递增的ID字段。        
  
  我们可以使用分页来制作主页和评论页，使用Redis的模板，每次新评论发表时，我们会将它的ID添加到一个Redis列表： 
  
     LPUSH latest.comments <ID>

我们将列表裁剪为指定长度，因此Redis只需要保存最新的5000条评论：

       LTRIM latest.comments 0 5000 

每次我们需要获取最新评论的项目范围时，我们调用一个函数来完成（使用伪代码）：

    FUNCTION get_latest_comments(start, num_items):  
    id_list = redis.lrange("latest.comments",start,start+num_items - 1)  
    IF id_list.length < num_items  
        id_list = SQL_DB("SELECT ... ORDER BY time LIMIT ...")  
    END  
    RETURN id_list  
    END

这里我们做的很简单。在Redis中我们的最新ID使用了常驻缓存，这是一直更新的。但是我们做了限制不能超过5000个ID，因此我们的获取ID函数会一直询问Redis。只有在start/count参数超出了这个范围的时候，才需要去访问数据库。        

我们的系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，而主页或第一个评论页是不会麻烦到硬盘上的数据库了。

#### 删除与过滤     

 我们可以使用LREM来删除评论。如果删除操作非常少，另一个选择是直接跳过评论条目的入口，报告说该评论已经不存在。       
 
 有些时候你想要给不同的列表附加上不同的过滤器。如果过滤器的数量受到限制，你可以简单的为每个不同的过滤器使用不同的Redis列表。毕竟每个列表只有5000条项目，但Redis却能够使用非常少的内存来处理几百万条项目。

#### 排行榜相关      

另一个很普遍的需求是各种数据库的数据并非存储在内存中，因此在按得分排序以及实时更新这些几乎每秒钟都需要更新的功能上数据库的性能不够理想。      

典型的比如那些在线游戏的排行榜，比如一个Facebook的游戏，根据得分你通常想要：
        
	 - 列出前100名高分选手         
	 - 列出某用户当前的全球排名      

 这些操作对于Redis来说小菜一碟，即使你有几百万个用户，每分钟都会有几百万个新的得分。      模式是这样的，每次获得新得分时，我们用这样的代码：      
 
    ZADD leaderboard  <score>  <username>      
 
 你可能用userID来取代username，这取决于你是怎么设计的。
      
 得到前100名高分用户很简单：ZREVRANGE leaderboard 0 99。 
      
 用户的全球排名也相似，只需要：ZRANK leaderboard <username>。

#### 按照用户投票和时间排序      

排行榜的一种常见变体模式就像Reddit或Hacker News用的那样，新闻按照类似下面的公式根据得分来排序：       

     score = points / time^alpha      
     
  因此用户的投票会相应的把新闻挖出来，但时间会按照一定的指数将新闻埋下去。下面是我们的模式，当然算法由你决定。      
  
  模式是这样的，开始时先观察那些可能是最新的项目，例如首页上的1000条新闻都是候选者，因此我们先忽视掉其他的，这实现起来很简单。      
  
  每次新的新闻贴上来后，我们将ID添加到列表中，使用LPUSH + LTRIM，确保只取出最新的1000条项目。      
  
  有一项后台任务获取这个列表，并且持续的计算这1000条新闻中每条新闻的最终得分。计算结果由ZADD命令按照新的顺序填充生成列表，老新闻则被清除。这里的关键思路是排序工作是由后台任务来完成的。

#### 处理过期项目     

 另一种常用的项目排序是按照时间排序。我们使用unix时间作为得分即可。      
 
 模式如下：       
 
	 - 每次有新项目添加到我们的非Redis数据库时，我们把它加入到排序集合中。这时我们用的是
	 时间属性，current_time和time_to_live。       
	 - 另一项后台任务使用ZRANGE…SCORES查询排序集合，取出最新的10个项目。如果发现unix
	 时间已经过期，则在数据库中删除条目。
	 
#### 计数       

Redis是一个很好的计数器，这要感谢INCRBY和其他相似命令。       

我相信你曾许多次想要给数据库加上新的计数器，用来获取统计或显示新信息，但是最后却由于写入敏感而不得不放弃它们。       

好了，现在使用Redis就不需要再担心了。有了原子递增（atomic increment），你可以放心的加上各种计数，用GETSET重置，或者是让它们过期。       

例如这样操作：         

	INCR user:<id> EXPIRE          
	user:<id> 60        

你可以计算出最近用户在页面间停顿不超过60秒的页面浏览量，当计数达到比如20时，就可以显示出某些条幅提示，或是其它你想显示的东西。

#### 特定时间内的特定项目        

另一项对于其他数据库很难，但Redis做起来却轻而易举的事就是统计在某段特点时间里有多少特定用户访问了某个特定资源。比如我想要知道某些特定的注册用户或IP地址，他们到底有多少访问了某篇文章。      

每次我获得一次新的页面浏览时我只需要这样做：       

	SADD page:day1:<page_id> <user_id>       
	当然你可能想用unix时间替换day1，比如time()-(time()%3600*24)等等。      
	想知道特定用户的数量吗？只需要使用SCARD page:day1:<page_id>。       
	需要测试某个特定用户是否访问了这个页面？SISMEMBER page:day1:<page_id>。
	
#### 实时分析正在发生的情况，用于数据统计与防止垃圾邮件等

   我们只做了几个例子，但如果你研究Redis的命令集，并且组合一下，就能获得大量的实时分析方法，有效而且非常省力。使用Redis原语命令，更容易实施垃圾邮件过滤系统或其他实时跟踪系统。

#### Pub/Sub
   Redis的Pub/Sub非常非常简单，运行稳定并且快速。支持模式匹配，能够实时订阅与取消频道。
   
#### 队列        

你应该已经注意到像list push和list pop这样的Redis命令能够很方便的执行队列操作了，但能做的可不止这些：比如Redis还有list pop的变体命令，能够在列表为空时阻塞队列。       

现代的互联网应用大量地使用了消息队列（Messaging）。消息队列不仅被用于系统内部组件之间的通信，同时也被用于系统跟其它服务之间的交互。消息队列的使用可以增加系统的可扩展性、灵活性和用户体验。非基于消息队列的系统，其运行速度取决于系统中最慢的组件的速度（注：短板效应）。而基于消息队列可以将系统中各组件解除耦合，这样系统就不再受最慢组件的束缚，各组件可以异步运行从而得以更快的速度完成各自的工作。    

此外，当服务器处在高并发操作的时候，比如频繁地写入日志文件。可以利用消息队列实现异步处理。从而实现高性能的并发操作。


