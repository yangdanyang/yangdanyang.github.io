---
layout:     post
title:      "简单工厂模式"
subtitle:   " \"Simple Factory Pattern\""
date:       2017-06-01 
author:     "Yang"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - Design Pattern
---

> “Beginning”
## 设计模式学习总结之简单工厂模式
### 前言
    在之前学习设计模式过程中，主要参考CSDN大牛lovelion的技术博客
    (http://blog.csdn.net/lovelion)，这边的总结主要设计学习过程中
    的一些知识点。
### 定义:
    简单工厂模式(Simple Factory Pattern)：定义一个工厂类，
    它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共
    同的父类。因为在简单工厂模式中用于创建实例的方法是静态
    (static)方法，因此简单工厂模式又被称为静态工厂方法(Static 
    Factory Method)模式，它属于类创建型模式。
### 创建流程:
    首先将需要创建的各种不同对象的相关代码封装到不同的类中，这些类称为
    具体产品类，而将它们公共的代码进行抽象和提取后封装在一个抽象产品类
    中，每一个具体产品类都是抽象产品类的子类；然后提供一个工厂类用于创
    建各种产品，在工厂类中提供一个创建产品的工厂方法，该方法可以根据所
    传入的参数不同创建不同的具体产品对象；客户端只需调用工厂类的工厂方
    法并传入相应的参数即可得到一个产品对象。
    
### 角色
    ● Factory（工厂角色）：工厂角色即工厂类，它是简单工厂模式的核
    心，负责实现创建所有产品实例的内部逻辑；工厂类可以被外界直接调用，
    创建所需的产品对象；在工厂类中提供了静态的工厂方法
    factoryMethod()，它的返回类型为抽象产品类型Product。
    ● Product（抽象产品角色）：它是工厂类所创建的所有对象的父类，封
    装了各种产品对象的公有方法，它的引入将提高系统的灵活性，使得在工厂
    类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子
    类对象。
    ● ConcreteProduct（具体产品角色）：它是简单工厂模式的创建目
    标，所有被创建的对象都充当这个角色的某个具体类的实例。每一个具体产
    品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法。
    
### 优点:
    1:工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的
    实例，客户端可以免除直接创建产品对象的职责，而仅仅"消费"产品，简
    单工厂模式实现了对象创建和使用的分离。
    2:客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所
    对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度
    减少使用者的记忆量。
    3:通过引入配置文件,可以在不修改任何客户端代码的情况下更换和增加新
    的具体产品类，在一定程度上提高了系统的灵活性。
### 缺点:
    1:由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工
    作，整个系统都要受到影响。
    2:会增加系统中类的个数(引入了新的工厂类),增加了系统的复杂度和理解
    难度
    3:系统的扩展困难,一旦添加新产品就不得不修改工厂逻辑，在产品类型较
    多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护
    4:简单工厂模式由于使用了静态工厂方法,造成工厂角色无法形成基于继承
    的等级结构。
### 适用场景:
    1:工厂类负责创建的对象比较少，这样不会造成工厂方法中的业务逻辑太
    过复杂。
    2:客户端只知道传入工厂类的参数,对于如何创建对象并不关心。
    
    
